---
- name: Install Red Hat ACS on OpenShift + Integrate Docker Registry
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    namespace: rhacs-operator
    central_port: "443"

  tasks:

    - name: Ensure namespace exists
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: Namespace
        name: "{{ namespace }}"

    - name: Create OperatorGroup
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: operators.coreos.com/v1
          kind: OperatorGroup
          metadata:
            name: rhacs-operator-group
            namespace: "{{ namespace }}"
          spec: {}

    - name: Create Subscription for ACS Operator
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            name: rhacs-operator-subscription
            namespace: "{{ namespace }}"
          spec:
            channel: stable
            name: rhacs-operator
            source: redhat-operators
            sourceNamespace: openshift-marketplace
            installPlanApproval: Automatic

    - name: Wait for ACS Operator CSV to succeed
      shell: |
        for i in {1..60}; do
          PHASES=$(oc get csv -n {{ namespace }} -o jsonpath='{.items[*].status.phase}')
          if echo "$PHASES" | grep -q "Succeeded"; then
            echo "Succeeded"
            exit 0
          fi
          echo "Waiting for ACS Operator... (Current: $PHASES)"
          sleep 20
        done
        echo "Operator installation timed out"
        exit 1
      register: operator_status
      changed_when: false

    - name: Deploy Central instance
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: platform.stackrox.io/v1alpha1
          kind: Central
          metadata:
            name: stackrox-central-services
            namespace: "{{ namespace }}"
          spec:
            configAsCode:
              configAsCodeComponent: Enabled
            monitoring:
              openshift:
                enabled: true
            network:
              policies: Enabled
            central:
              notifierSecretsEncryption:
                enabled: false
              exposure:
                loadBalancer:
                  enabled: false
                  port: 443
                nodePort:
                  enabled: false
                route:
                  enabled: true
                  reencrypt:
                    enabled: false
              telemetry:
                enabled: true
              db:
                isEnabled: Default
                connectionPoolSize:
                  maxConnections: 90
                  minConnections: 10
                persistence:
                  persistentVolumeClaim:
                    claimName: central-db
              persistence:
                persistentVolumeClaim:
                  claimName: stackrox-db
            egress:
              connectivityPolicy: Online
            scannerV4:
              db:
                persistence:
                  persistentVolumeClaim:
                    claimName: scanner-v4-db
              indexer:
                scaling:
                  autoScaling: Enabled
                  maxReplicas: 5
                  minReplicas: 2
                  replicas: 3
              matcher:
                scaling:
                  autoScaling: Enabled
                  maxReplicas: 5
                  minReplicas: 2
                  replicas: 3
            scanner:
              analyzer:
                scaling:
                  autoScaling: Enabled
                  maxReplicas: 5
                  minReplicas: 2
                  replicas: 3

    - name: Wait for Central route (dynamic lookup)
      kubernetes.core.k8s_info:
        api_version: route.openshift.io/v1
        kind: Route
        namespace: "{{ namespace }}"
        name: central
      register: central_route_info
      until: central_route_info.resources | length > 0
      retries: 60
      delay: 20

    - name: Set Central host fact
      set_fact:
        central_host: "{{ central_route_info.resources[0].spec.host }}"

    - name: Prompt user for DockerHub token
      pause:
        prompt: |
          ðŸ”‘ Please generate a DockerHub Personal Access Token here:
          ðŸ‘‰ https://hub.docker.com/settings/security
          (minimum scope: Read)
          Paste the token now:
      register: docker_pat_input

    - name: Create DockerHub registry integration in ACS
      uri:
        url: "https://{{ central_host }}:{{ central_port }}/v1/imageintegrations"
        method: POST
        headers:
          Authorization: "Bearer {{ lookup('env','ROX_API_TOKEN') }}"
        body_format: json
        body:
          name: dockerhub
          type: docker
          categories: ["REGISTRY"]
          docker:
            endpoint: "index.docker.io"
            username: "babbalrai"
            password: "{{ docker_pat_input.user_input }}"
        status_code: [200, 409]
        validate_certs: no

    - name: Restore default security policies
      uri:
        url: "https://{{ central_host }}:{{ central_port }}/v1/policies/restore_defaults"
        method: POST
        headers:
          Authorization: "Bearer {{ lookup('env','ROX_API_TOKEN') }}"
        status_code: 200
        validate_certs: no
